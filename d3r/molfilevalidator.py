#! /usr/bin/env python

import sys
import os
import argparse
import glob
import logging
from openeye import oechem
import pickle

import d3r
from d3r.celpp import util
from d3r.celpp.task import D3RParameters


# create logger
logger = logging.getLogger('d3r.molfilevalidator')
DEFAULT_LOG_LEVEL = 'ERROR'
p = D3RParameters()
p.loglevel = DEFAULT_LOG_LEVEL
util.setup_logging(p)


def _parse_arguments(desc, args):
    """Parses command line arguments using argparse.
    """
    parsed_arguments = D3RParameters()

    help_formatter = argparse.RawDescriptionHelpFormatter
    parser = argparse.ArgumentParser(description=desc,
                                     formatter_class=help_formatter)
    parser.add_argument("usersubmission", help='Directory or tar or tar.gz file'
                                               'containing .mol files to validate')
    parser.add_argument("moleculedb", help='Molecule database file generated by'
                                           'genmolfiledb.py')
    parser.add_argument('--version', action='version',
                        version=('%(prog)s ' + d3r.__version__))
    return parser.parse_args(args, namespace=parsed_arguments)

"""ORIGINAL SCRIPT
import tarfile
import os
import commands
import pickle
import glob
from openeye import oechem
import logging


def remove_certain_lines (input_file, out_file, line_num = 1):
    f = open(input_file, "r")
    new_lines = []
    for index, line in enumerate(f.readlines()):
        if index != line_num -1:
            new_lines.append(line)
    f.close()
    out_f = open(out_file, "w")
    out_f.writelines(new_lines)
    out_f.close()

def untar_tgz (filename, output_path, output_name, update = True):
    tar = tarfile.open(filename)
    output_full_name = os.path.join(output_path, output_name)
    try_to_untar = False
    if os.path.isdir(output_full_name):
        if update:
            commands.getoutput("rm %s"%output_full_name)
            try_to_untar = True
    else:
        try_to_untar = True
    if try_to_untar:
        tar.extractall(output_full_name)
        tar.close()
        #move everything under the output_full_name/another folder to output_full_name
        commands.getoutput("mv %s/*/* %s"%(output_full_name,output_full_name))



def get_mw_na (rdmol):
    #from rdmol object get the molecular weight and number of heavy atoms
    atom_dic = {}
    heavy_atom = 0
    molecular_weight = 0
    for atom in rdmol.GetAtoms():
        if not atom.IsHydrogen():
            heavy_atom +=1
            atomical_number = atom.GetAtomicNum()
            molecular_weight += atomical_number
            if atomical_number not in atom_dic:
                atom_dic[atomical_number] = 1
            else:
                atom_dic[atomical_number] += 1
    return (heavy_atom, molecular_weight, atom_dic)



def validation_mol (template_pickle, mol_file_path, result_log, log_update = True, ignore_ligand = ["FXR_33"]):
    template_p = open(template_pickle,"r")
    template_dic = pickle.load(template_p)
    template_p.close()
    log_lines = []
    all_mol_files = glob.glob("%s/*.mol"%mol_file_path)
    print "AAAAAAAAAAAAAAAAA", all_mol_files
    passed = True
    for mol_file in all_mol_files:
        try:
            #for stage 2 the file don't have the pose number so need to split furthert to get the ligand name
            ligand_name = os.path.splitext(os.path.basename(mol_file))[0].split("-")[1]
            if ligand_name in ignore_ligand:
                continue
        except:
            log_lines.append("Fatal Error: The ligand name of the mol file:%s cannot be extracted, need to check the naming\n"%(ligand_name))
            passed = False
        if ligand_name not in template_dic:
            log_lines.append("Fatal Error: This ligand: %s corresponding to this mol file: %s could not be found in the template, need to check how the mol file be named...\n"%(ligand_name, os.path.basename(mol_file)))
            passed = False
        else:
            try:
                print "CCCCCCCCCCCCCCCCCC", mol_file
                #raw_input()
                istream = oechem.oemolistream()
                istream.open(mol_file)
                rd_mol = oechem.OEMol()
                oechem.OEReadMolecule(istream, rd_mol)
                print "IIIIIIIIIIIIIII", rd_mol.GetAtoms()
                istream.close()
            except:
                log_lines.append("Fatal Error: This mol file %s cannot be parse as OpenEye OEMol object, need to check the format...\n"%(os.path.basename(mol_file)))

                rd_mol = False
                passed = False
            if rd_mol:
                heavy_atoms, molecular_weight, atom_dic = get_mw_na(rd_mol)
            else:
                log_lines.append("Fatal Error: This mol file %s cannot be parse as OpenEye OEMol object, need to check the format...\n"%(os.path.basename(mol_file)))
                passed = False
                continue
            if (heavy_atoms, molecular_weight) == (template_dic[ligand_name][0], template_dic[ligand_name][1]):
                log_lines.append("This ligand :%s in this file: %s passed the validation\n"%(ligand_name, os.path.basename(mol_file)))
            else:
                log_lines.append("Fatal Error: This ligand: %s in this file: %s failed the validation\n"%(ligand_name, os.path.basename(mol_file)))
                log_lines.append("      This ligand has %s heavy atoms and the mol weight is %s\n"%(heavy_atoms, molecular_weight))
                log_lines.append("      This ligand has atom dictionary as %s, note: the atom dictionary format is {atomic number: number of atoms}\n"%(atom_dic))
                log_lines.append("      The template has %s heavy atoms and the mol weight is %s\n"%(template_dic[ligand_name][0], template_dic[ligand_name][1]))
                log_lines.append("      The template has atom dictionary as %s, note: the atom dictionary format is {atomic number: number of atoms}\n"%(template_dic[ligand_name][2]))
                passed = False
    if not passed:
        log_lines.append("This submittion failed the validation because of the Fatal Errors...\n")
        out_f = open(result_log, "w")
        out_f.writelines(log_lines)
        out_f.close()
        return False
    else:
        log_lines.append("This submittion passed the mol file validation\n")
        out_f = open(result_log, "w")
        out_f.writelines(log_lines)
        out_f.close()
        return True

#main code
logger = logging.getLogger()
logging.basicConfig( format  = '%(asctime)s: %(message)s', datefmt = '%m/%d/%y %I:%M:%S', filename = 'final.log', filemode = 'w', level   = logging.INFO )
#logging.basicConfig( filename = 'final.log', filemode = 'w', level   = logging.INFO )

template_pickle = "mw_na_template_openeye.pickle"
main_folder_path = os.getcwd()
validation = validation_mol(template_pickle, main_folder_path, "final.log")
print "Passed the validation:%s"%validation
if not validation:
    commands.getoutput('touch "failed"')

"""




def main(args):
    """Main entry into genmoleculedb
    :param args: should be set to sys.argv which is a list of arguments
                 starting with script name as the first argument
    """
    desc = """
              Version {version}

              Validates a set of .mol files found in input directory
              (http://www.drugdesigndata.org)

              """.format(version=d3r.__version__)

    theargs = _parse_arguments(desc, args[1:])
    theargs.program = args[0]
    theargs.version = d3r.__version__

    util.setup_logging(theargs)

    try:
        return _generate_molecule_database(theargs)
    except Exception:
        logger.exception("Error caught exception")
        return 2


if __name__ == '__main__':  # pragma: no cover
    sys.exit(main(sys.argv))
